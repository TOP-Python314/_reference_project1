                Архитектура
                для проекта
            
              Крестики-Нолики



=========  МОДЕЛЬ РАСПРОСТРАНЕНИЯ  ========

Файл, являющийся точкой входа для программы, и вспомогательные файлы с исходным кодом. Файлы данных.



=============  МОДЕЛЬ ДАННЫХ  =============

1. Данные, получаемые от пользователя

Все данные должны быть верифицированы. При получении некорректных данных запрос повторяется - нужное количество раз до получения корректных данных.

    имена игроков
        
        начинаются с буквенного символа
        уникальные
    
    команды пользователя
        
                  начать новую партию : new    : n : начать   : н :
        загрузить существующую партию : load   : l : загрузка : з :
             отобразить раздел помощи : help   : h : помощь   : п :
  создать или переключиться на игрока : player : p : игрок    : и :
       отобразить таблицу результатов : table  : t : таблица  : т :
                 изменить размер поля : dim    : d : размер   : р :
                                выйти : quit   : q : выход    : в :
    
    ходы игроков
        
        используются символы цифр (в соответствии с выбранной системой нумерации игрового поля)
        номера свободных клеток



2. Структуры данных, создаваемые программой
    
    символы токенов
        
        'XO'
        
        ('X', 'O')
    
    игроки и их статистика
        
        {'имя_игрока_1': {'побед': 3, 'поражений': 5, 'ничьих': 8},
         'имя_игрока_2': {'побед': 0, 'поражений': 0, 'ничьих': 0},
         ...}
        
        {'имя_игрока_1': [3, 5, 8],
         'имя_игрока_2': [0, 0, 0],
         ...}
    
    сохранённые партии
        
        {frozenset(('имя_игрока_1', 'имя_игрока_2')): {'X': 'имя_игрока_1', 
                                                       'turns': <сделанные_ходы>,
                                                       'dim': 3},
         frozenset(('имя_игрока_3', 'имя_игрока_1')): {'X': 'имя_игрока_3', 
                                                       'turns': <сделанные_ходы>,
                                                       'dim': 7},
         ...}
        
        [{'имя_игрока_1': {'X': <сделанные_ходы>}, 'имя_игрока_2': {'O': <сделанные_ходы>}, 'dim': 3},
         {'имя_игрока_3': {'X': <сделанные_ходы>}, 'имя_игрока_1': {'O': <сделанные_ходы>}, 'dim': 7},
         ...]
    
    выигрышные комбинации
        
        [(0, 1, 2),
         (3, 4, 5),
         (6, 7, 8),
         (0, 3, 6),
         (1, 4, 7),
         (2, 5, 8),
         (0, 4, 8),
         (2, 4, 6)]
        
        [{0, 1, 2},
         {3, 4, 5},
         {6, 7, 8},
         {0, 3, 6},
         {1, 4, 7},
         {2, 5, 8},
         {0, 4, 8},
         {2, 4, 6}]
    
    сделанные ходы
        
        {'имя_игрока_1': [4, 8], 
         'имя_игрока_2': [2, 0]}
        
        {'имя_игрока_1': {'X': [4, 8]}, 
         'имя_игрока_2': {'O': [2, 0]}}
        
        {'1': 4, '2': 2, '3': 8, '4': 0}
        
        [['имя_игрока_1', 'имя_игрока_2'], [4, 2, 8, 0]]
        
        [4, 2, 8, 0]
        
        {4: 'X', 2: 'O', 8: 'X', 0: 'O'}
        


3. Форматы файлов данных
    
    players.ini - игроки и их статистика
        
        [имя_игрока_1]
        побед = 3
        поражений = 5
        ничьих = 8
        
        [имя_игрока_2]
        побед = 0
        поражений = 0
        ничьих = 0
        
        ...
    
    saves.ttt - сохранённые партии
        
        имя_игрока_1,имя_игрока_2!4,2,8,0!3
        имя_игрока_3,имя_игрока_1!!7
        ...



=====  ПОСЛЕДОВАТЕЛЬНОСТЬ ВЫПОЛНЕНИЯ  =====

1. Чтение файлов данных и их интерпретация
   Заполнение словаря игроков и словаря сохранений

2. ЕСЛИ отсутствует информация об игроках:
        вывод раздела помощи

3. Запрос имени игрока

4. ЕСЛИ имя игрока отсутствует в словаре игроков:
        добавление нового элемента в словарь игроков

5. Добавление имени игрока в список активных игроков
   Добавление объекта функции запроса хода игрока в список функций ходов

# суперцикл
    
    6. Ожидание ввода команды
    
    начать
        
        7. Запрос режима игры.
        
        8. ЕСЛИ один человек:
                
                Запрос уровня сложности бота
                
                Добавление имени бота в список активных игроков
                Добавление объекта функции хода бота в список функций ходов
            
        ИЛИ
        
        8. ЕСЛИ два человека:
                
                Запрос имени второго игрока

                ЕСЛИ имя второго игрока отсутствует в словаре игроков:
                     добавление нового элемента в словарь игроков

                Добавление имени второго игрока в список активных игроков
                Добавление объекта функции запроса хода игрока в список функций ходов
        
        9. Запрос токена для первого игрока
        
        10. ЕСЛИ первый игрок выбирает 'О':
                 инвертировать список активных игроков и список функций ходов


